import React, { FunctionComponent } from 'react';
import { graphql } from 'react-relay';
import { RecordSourceSelectorProxy } from 'relay-runtime';
import { FormikConfig } from 'formik/dist/types';
import CreateSDO from '@components/common/form/formCreateSCO/CreateSDO';
import { MalwareAddInput } from '@components/common/form/formCreateSCO/createSDO.inputs';
import { handleErrorInForm } from '../../../../relay/environment';
import { insertNode } from '../../../../utils/store';
import { MalwareCreationMutation, MalwareCreationMutation$variables } from './__generated__/MalwareCreationMutation.graphql';
import { MalwaresCardsPaginationQuery$variables } from './__generated__/MalwaresCardsPaginationQuery.graphql';
import useApiMutation from '../../../../utils/hooks/useApiMutation';

const malwareMutation = graphql`
  mutation MalwareCreationMutation($input: MalwareAddInput!) {
    malwareAdd(input: $input) {
      id
      standard_id
      name
      description
      entity_type
      parent_types
      architecture_execution_envs
      implementation_languages
      malware_types
      ...MalwareCard_node
    }
  }
`;

interface MalwareFormProps {
  updater: (store: RecordSourceSelectorProxy, key: string) => void
  onCompleted?: () => void
  onReset?: () => void;
  defaultCreatedBy?: { value: string, label: string }
  defaultMarkingDefinitions?: { value: string, label: string }[]
  defaultConfidence?: number;
}

export const MalwareCreationForm: FunctionComponent<MalwareFormProps> = ({
  updater,
  onCompleted,
  onReset,
  defaultConfidence,
  defaultCreatedBy,
  defaultMarkingDefinitions,
}) => {
  const [commit] = useApiMutation<MalwareCreationMutation>(malwareMutation);

  const onSubmit: FormikConfig<MalwareAddInput>['onSubmit'] = (values, {
    setSubmitting,
    setErrors,
    resetForm,
  }) => {
    console.log(values);
    const input: MalwareCreationMutation$variables['input'] = {
      name: values.name,
      description: values.description,
      is_family: values.is_family,
      confidence: parseInt(String(values.confidence), 10),
      malware_types: (values.malware_types ?? []).map(({ value }) => value),
      killChainPhases: (values.killChainPhases ?? []).map(({ value }) => value),
      architecture_execution_envs: values.architecture_execution_envs,
      createdBy: values.createdBy?.value,
      implementation_languages: values.implementation_languages,
      objectMarking: values.objectMarking.map((v) => v.value),
      objectLabel: values.objectLabel.map((v) => v.value),
      externalReferences: values.externalReferences.map(({ value }) => value),
      file: values.file,
    };
    commit({
      variables: {
        input,
      },
      updater: (store) => {
        if (updater) {
          updater(store, 'malwareAdd');
        }
      },
      onError: (error) => {
        handleErrorInForm(error, setErrors);
        setSubmitting(false);
      },
      onCompleted: () => {
        setSubmitting(false);
        resetForm();
        if (onCompleted) {
          onCompleted();
        }
      },
    });
  };

  return (
    <CreateSDO<MalwareAddInput>
      sdoType="Malware"
      onSubmit={onSubmit}
      onReset={onReset}
    />
  );
};

const MalwareCreation = ({ paginationOptions }: { paginationOptions: MalwaresCardsPaginationQuery$variables }) => {
  const updater = (store: RecordSourceSelectorProxy) => insertNode(
    store,
    'Pagination_malwares',
    paginationOptions,
    'malwareAdd',
  );

  return (
    <MalwareCreationForm
      updater={updater}
    />
  );
};

export default MalwareCreation;
